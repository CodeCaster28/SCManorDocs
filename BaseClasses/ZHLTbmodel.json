{
  "Classname": "ZHLTbmodel",
  "Description": "Entity_Description_here",
  "KeyDescriptions": [
    {
      "keyName": "zhlt_usemodel",
      "keyDescription": "For Brush entities: sets brush model template of this entity. Set it to the name of other brush entity (now called a template) and it's brush model will be used instead. Templates might save server resources by \"copying\" single brush entity (template identified by name) and using it in multiple places (can be used for entities like tables, columns, barrels, cars e.t.c.). Also one template occupies only one entity slot when compiling a map, no matter how many entities refers to it. For model-based point entities: copy display model of specified entity, to use it's model instead. Using \"Custom model\" is more appropriate in most cases, however, when it's not possible, use \"ZHLT Copy Lighting From Target\".",
      "keyChoices": []
    },
    {
      "keyName": "zhlt_copylight",
      "keyDescription": "For Brush entities: copies light info from specified entity. This can be useful when we want this entity to be light up in a similar way the other entity of the map is, e.g. we have few func_pushables on map, and they are lit differently, tough they can be moved (and lightning is not updated on dynamic entities), it may looks shabby. With this keyvalue we can prevent this making all func_pushables received light in a same way. Another example: we have few windows in corridor (e.g. func_breakables), all of them receive a light in acceptable way, but the last window receive part of the light from another room and breaking whole atmosphere. We can set this window \"Copy Lightning From Target\" to any other window to fix this. Note that this can be also used for completely different entities, so we copy lightning from func_door to func_breakable as well.\nFor model-based point entities: if model lightning does not satisfy you (e.g. it's too dark) you can specify a name of entity here to copy it's lightning values- it can be other model-based entity or simply [info_target][../info_target).",
      "keyChoices": []
    },
    {
      "keyName": "zhlt_noclip",
      "keyDescription": "Enable or disable collision of entity.",
      "keyChoices": [
        {
          "choiceValue": "0 ",
          "choiceDescription": "Keep default collision."
        },
        {
          "choiceValue": "1 ",
          "choiceDescription": "This makes entity non-solid- all collision info from this entity will be ignored. Use it in case when entity have no build-in collision disabling ability (e.g. by selecting \"Passable\" flag in func_door) and you much desire to disable collision for this entity."
        }
      ]
    },
    {
      "keyName": "zhlt_invisible",
      "keyDescription": "Brush entities only. Determines if entity should be visible.",
      "keyChoices": [
        {
          "choiceValue": "0 ",
          "choiceDescription": ""
        },
        {
          "choiceValue": "1 ",
          "choiceDescription": ""
        }
      ]
    },
    {
      "keyName": "zhlt_customshadow",
      "keyDescription": "Opaque brush entities only. If \"ZHLT Ligth Flags\" of this entity uses any of the option with 'Opaque' word, this will allow to customize shadow dropped by this entity. Value format: [0 - 1.0] [0 - 1.0] [0 - 1.0], use three values for color or only one for transparency.",
      "keyChoices": []
    },
    {
      "keyName": "zhlt_embedlightmap",
      "keyDescription": "Transparent brush entities only. Set it to 'Yes' and this transparent entity will take a light from environment making it looks much more natural. Use it when entities (e.g. glass represented by func_wall) omits lightning from surrounding. Note that this is expensive so shouldn't be used too often, but resolution of those lightmaps can be controlled by keyvalue explained below.",
      "keyChoices": [
        {
          "choiceValue": "0 ",
          "choiceDescription": ""
        },
        {
          "choiceValue": "1 ",
          "choiceDescription": ""
        }
      ]
    },
    {
      "keyName": "zhlt_embedlightmapresolution",
      "keyDescription": "Value of power of two that controls the resolution of embedded lightmaps of transparent textures (see keyvalue above). Higher value for better optimization. Default and recommended value is 4.",
      "keyChoices": []
    }
  ]
}